# deploy.yaml

# PVCs
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

# MongoDB Deployment + Service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo:latest
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              value: "root"
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: "example"
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongo-data

---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  type: LoadBalancer
  selector:
    app: mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017

# Mongo Express
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: express
spec:
  replicas: 1
  selector:
    matchLabels:
      app: express
  template:
    metadata:
      labels:
        app: express
    spec:
      containers:
        - name: express
          image: mongo-express
          ports:
            - containerPort: 8081
          env:
            - name: ME_CONFIG_BASICAUTH_USERNAME
              value: "root"
            - name: ME_CONFIG_BASICAUTH_PASSWORD
              value: "example"
            - name: ME_CONFIG_MONGODB_SERVER
              value: "mongo"
            - name: ME_CONFIG_MONGODB_AUTH_USERNAME
              value: "root"
            - name: ME_CONFIG_MONGODB_AUTH_PASSWORD
              value: "example"

---
apiVersion: v1
kind: Service
metadata:
  name: express
spec:
  type: LoadBalancer
  selector:
    app: express
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081

# limitações de acesso da API ao cluster Kubernetes
# Para que a API possa interagir com o cluster Kubernetes, é necessário configurar permissões adequ
# 1. ServiceAccount
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#  name: api-sa
#  namespace: default  # ou o namespace onde sua API roda
---
# 2. ClusterRole (ou Role, se quiser escopo por namespace)
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: api-pod-reader
# rules:
# - apiGroups: [""]
#   resources: ["pods", "services"]
#   verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# - apiGroups: ["apps"]
#   resources: ["deployments"]
#   verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# 3. ClusterRoleBinding
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: api-pod-reader-binding
# subjects:
# - kind: ServiceAccount
#   name: api-sa
#   namespace: default
# roleRef:
#   kind: ClusterRole
#   name: api-pod-reader
#   apiGroup: rbac.authorization.k8s.io


# Acesso completo (admin) - para testes apenas, não recomendado para produção
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-access
  namespace: default
---
apiVersion: v1
kind: Secret
metadata:
  name: api-access-token
  namespace: default
  annotations:
    kubernetes.io/service-account.name: api-access
type: kubernetes.io/service-account-token
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: api-access-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: api-access
  namespace: default

---
# 4. Deployment atualizado
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      serviceAccountName: api-access  # <-- IMPORTANTE: usar o SA customizado
      containers:
        - name: api
          image: alexsandrojsilva0/api:latest
          ports:
            - containerPort: 3001
          env:
            - name: NAMESPACE
              value: "default"
            - name: CLUSTER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: api-access-token      # nome do secret
                  key: token 
            - name: CLUSTER_CA_DATA
              valueFrom:
                secretKeyRef:
                  name: api-access-token
                  key: ca.crt
            - name: JWT_SECRET
              value: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9JWT"
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "3001"
            - name: CLUSTER_API_URI_SERVER
              value: "https://kubernetes.default.svc"
            - name: KUBERNETES_SERVICE_PORT
              value: "443"
            - name: API_URL
              value: "http://api:3001"
            - name: MIN_SIZE_PASSWORD
              value: "6"
            - name: COLLECTION_NAME_CLIENT_ZAP
              value: "collection_zap"
            - name: COLLECTION_NAME_CLIENT_PEDIDOS
              value: "collection_pedidos"
            - name: COLLECTION_NAME_CLIENT_PAGAMENTOS
              value: "collection_pagamentos"
            - name: GOOGLE_CLIENT_ID
              value: "566156554431-2qmrdv6eagv44rq6n07c1mvupak41v6t.apps.googleusercontent.com"
            - name: GOOGLE_CLIENT_SECRET
              value: "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"
            - name: REDIRECT_URI
              value: "http://localhost:3000/testApi"
            - name: DB_USER
              value: "root"
            - name: DB_PASS
              value: "example"
            - name: DB_HOST
              value: "mongo"
            - name: DB_PORT
              value: "27017"
            - name: DB_NAME
              value: "tests"
            - name: DEV
              value: "false"

---
# 5. Service (sem alterações necessárias)
apiVersion: v1
kind: Service
metadata:
  name: api
spec:
  type: LoadBalancer
  selector:
    app: api
  ports:
    - protocol: TCP
      port: 3001
      targetPort: 3001